<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Volar en pantalla — juego/archivo comunitario</title>
  <style>
    :root{
      --white:#ffffff; --concrete:#b5b5b5; --concrete-dark:#6e6e6e; --green:#2F6B45; --blue:#7DA7C7; --orange:#F07D23; --black:#111;
      --spacing: clamp(12px, 2.2vw, 18px);
    }
    *{box-sizing:border-box}
    body{font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji";
      margin:0; color:var(--black); background:var(--white)}
    header{position:sticky; top:0; background:linear-gradient(#fff, #fffccf00); border-bottom:1px solid #eee; padding:12px var(--spacing); z-index:10}
    header h1{margin:0; font-size:clamp(20px,3.5vw,28px);}
    header p{margin:6px 0 0; color:#444; font-size:clamp(12px,2.5vw,14px)}

    .wrap{max-width:960px; margin:0 auto; padding:calc(var(--spacing)*1.2) var(--spacing)}
    .card{background:#fff; border:1px solid #eee; border-radius:16px; padding:calc(var(--spacing)*1.2); box-shadow:0 10px 18px rgba(0,0,0,.06)}
    .row{display:grid; gap:var(--spacing)}
    .grid-2{grid-template-columns:1fr;}
    @media (min-width:880px){.grid-2{grid-template-columns:1fr 1fr}}

    .nav{display:flex; gap:8px; margin-bottom:var(--spacing)}
    .nav button{appearance:none; border:1px solid var(--concrete-dark); color:#222; background:#fff; padding:10px 14px; border-radius:999px; cursor:pointer}
    .nav button.active{background:var(--black); color:#fff; border-color:var(--black)}

    .step{display:none}
    .step.active{display:block}
    label{font-weight:600; display:block; margin-bottom:6px}
    input[type="text"], textarea{width:100%; padding:10px 12px; border-radius:10px; border:1px solid #ddd; font-size:16px}
    input[type="file"]{display:block}
    .hint{font-size:12px; color:#666; margin-top:4px}
    .actions{display:flex; gap:10px; justify-content:space-between; margin-top:var(--spacing)}
    .btn{appearance:none; border:none; border-radius:12px; padding:12px 16px; font-weight:600; cursor:pointer}
    .btn-primary{background:var(--black); color:#fff}
    .btn-ghost{background:#fff; color:#111; border:1px solid #ddd}

    .previewBox{border:1px dashed var(--concrete-dark); border-radius:12px; padding:10px; min-height:120px; display:grid; place-items:center; background:linear-gradient(45deg, #f8f8f8, #fcfcfc)}
    .previewBox img{max-width:100%; max-height:240px; border-radius:10px}

    canvas{width:100%; height:160px; background:linear-gradient(90deg, #f7f7f7, #fbfbfb); border:1px solid #eee; border-radius:10px}

    .gallery{display:grid; gap:var(--spacing); grid-template-columns:1fr}
    @media (min-width:720px){.gallery{grid-template-columns:1fr 1fr}}
    .tile{border:1px solid #eee; border-radius:16px; overflow:hidden; background:#fff}
    .tile header{display:flex; align-items:center; gap:8px; padding:12px; border-bottom:1px solid #eee; position:relative}
    .dot{width:10px; height:10px; border-radius:999px; background:var(--green)}
    .tile .content{padding:12px}
    .kv{display:grid; grid-template-columns:120px 1fr; gap:8px; font-size:14px}
    audio{width:100%}

    .notice{background:#f9f9ff; border:1px solid #e6e6ff; color:#333; padding:10px 12px; border-radius:10px; font-size:14px}
  </style>
</head>
<body>
  <header>
    <h1>Volar en pantalla — juego/archivo comunitario (MVP)</h1>
    <p>Obra-juego de 3 preguntas. Inspirada en la lógica de creación colectiva de <em>Volando</em> (1982/2014). La galería al final reúne las aportaciones <em>en este navegador</em> (prototipo localStorage).</p>
  </header>

  <main class="wrap row">
    <div class="card">
      <div class="nav">
        <button id="tabJuego" class="active" type="button">Juego</button>
        <button id="tabArchivo" type="button">Archivo</button>
      </div>

      <section id="panelJuego" class="row">
        <div class="step active" data-step="1">
          <h2>1) ¿Qué objeto llevas en la cabeza hoy?</h2>
          <div class="row grid-2">
            <div>
              <label for="headText">Palabra (breve)</label>
              <input id="headText" maxlength="40" placeholder="velo, gorra, idea, nudo..." />
              <p class="hint">Tip: puedes escribir algo literal o poético. Máx. 40 caracteres.</p>
              <label style="margin-top:14px">Subir foto (opcional)</label>
              <input id="headFile" type="file" accept="image/*" />
              <p class="hint">Para respetar privacidad, evita rostros identificables si no tienes permiso.</p>
            </div>
            <div>
              <div class="previewBox" id="headPreview">Sin imagen aún</div>
            </div>
          </div>
          <div class="actions">
            <span></span>
            <button class="btn btn-primary" id="next1">Siguiente →</button>
          </div>
        </div>

        <div class="step" data-step="2">
          <h2>2) ¿Qué sonido piensas ahora?</h2>
          <p>Graba 3 segundos. Generaremos una <strong>imagen del sonido</strong> (onda) y podrás escuchar el resultado.</p>
          <div class="row grid-2">
            <div>
              <div class="row">
                <button class="btn btn-ghost" id="btnRec">● Grabar 3 s</button>
                <audio id="audioPlayback" controls></audio>
                <p class="hint" id="recHint">Pulsa “Grabar”, espera, y luego podrás reproducir.</p>
              </div>
            </div>
            <div>
              <label>Imagen generada del sonido</label>
              <canvas id="soundCanvas" width="640" height="180"></canvas>
            </div>
          </div>
          <div class="actions">
            <button class="btn btn-ghost" id="back2">← Volver</button>
            <button class="btn btn-primary" id="next2">Siguiente →</button>
          </div>
        </div>

        <div class="step" data-step="3">
          <h2>3) Deja un gesto que no se ve</h2>
          <label for="ghostText">Palabra o frase mínima (se mostrará translúcida)</label>
          <input id="ghostText" maxlength="60" placeholder="susurro / eco / latencia..." />
          <div class="actions">
            <button class="btn btn-ghost" id="back3">← Volver</button>
            <button class="btn btn-primary" id="submitAll">Enviar al archivo</button>
          </div>
          <p class="hint">Este MVP guarda localmente en tu navegador. En producción, se conectará a Supabase (Storage + DB) para archivo compartido.</p>
        </div>
      </section>

      <section id="panelArchivo" class="row" style="display:none">
        <h2>Archivo comunitario (esta sesión/navegador)</h2>
        <div class="notice">Prototipo: los envíos se guardan en <strong>localStorage</strong>. Para archivo real compartido, cambiaremos a <strong>Supabase</strong> (sin servidor propio): imágenes/audio a Storage y metadatos a una tabla.
        </div>
        <div class="gallery" id="gallery"></div>
      </section>
    </div>
  </main>

  <template id="tileTmpl">
    <article class="tile">
      <header><span class="dot"></span> <strong>Entrada</strong><span style="margin-left:auto" class="time"></span></header>
      <div class="content row">
        <div class="kv"><div>Objeto cabeza</div><div class="headTxt"></div></div>
        <div class="row grid-2">
          <div>
            <div class="kv"><div>Imagen cabeza</div><div class="headImg"></div></div>
          </div>
          <div>
            <div class="kv"><div>Imagen del sonido</div><div class="sndImg"></div></div>
          </div>
        </div>
        <div class="kv"><div>Audio</div><div class="audioWrap"></div></div>
        <div class="kv"><div>Gesto invisible</div><div class="ghostTxt" style="opacity:.6"></div></div>
      </div>
    </article>
  </template>

  <script>
    // --- navegación tabs
    const tabJuego = document.getElementById('tabJuego');
    const tabArchivo = document.getElementById('tabArchivo');
    const panelJuego = document.getElementById('panelJuego');
    const panelArchivo = document.getElementById('panelArchivo');
    const galleryEl = document.getElementById('gallery');

    tabJuego.addEventListener('click', ()=>{ tabJuego.classList.add('active'); tabArchivo.classList.remove('active'); panelJuego.style.display='grid'; panelArchivo.style.display='none'; });
    tabArchivo.addEventListener('click', ()=>{ tabArchivo.classList.add('active'); tabJuego.classList.remove('active'); panelArchivo.style.display='grid'; panelJuego.style.display='none'; renderGallery(); });

    // --- pasos
    const steps = [...document.querySelectorAll('.step')];
    const goStep = (n)=>{ steps.forEach(s=> s.classList.remove('active')); document.querySelector(`.step[data-step="${n}"]`).classList.add('active'); }

    // --- step1: texto + imagen
    const headText = document.getElementById('headText');
    const headFile = document.getElementById('headFile');
    const headPreview = document.getElementById('headPreview');
    let headImageDataUrl = null;

    headFile.addEventListener('change', async (e)=>{
      const f = e.target.files?.[0];
      if(!f) { headPreview.textContent = 'Sin imagen'; headImageDataUrl=null; return }
      const img = document.createElement('img');
      img.src = URL.createObjectURL(f);
      img.onload = ()=>{
        // downscale to safe size & convert to dataURL
        const c = document.createElement('canvas');
        const maxW = 900; const maxH = 900; let {width:w, height:h} = img;
        const ratio = Math.min(maxW/w, maxH/h, 1);
        c.width = Math.round(w*ratio); c.height = Math.round(h*ratio);
        const ctx = c.getContext('2d'); ctx.drawImage(img,0,0,c.width,c.height);
        headImageDataUrl = c.toDataURL('image/jpeg', 0.85);
        headPreview.innerHTML = ''; headPreview.appendChild(img);
      }
    });

    document.getElementById('next1').addEventListener('click', ()=> goStep(2));

    // --- step2: grabación + imagen de sonido
    const btnRec = document.getElementById('btnRec');
    const audioPlayback = document.getElementById('audioPlayback');
    const canvas = document.getElementById('soundCanvas');
    const ctx = canvas.getContext('2d');
    let audioBlob = null; let soundImageDataUrl = null;

    let recording = false;
    btnRec.addEventListener('click', async ()=>{
      if(recording) return; recording = true; btnRec.disabled = true; btnRec.textContent = 'Grabando...';
      try{
        const stream = await navigator.mediaDevices.getUserMedia({ audio:true });
        const rec = new MediaRecorder(stream);
        const chunks = [];
        rec.ondataavailable = e => chunks.push(e.data);
        // Visualización básica con Analyser
        const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        const src = audioCtx.createMediaStreamSource(stream);
        const analyser = audioCtx.createAnalyser(); analyser.fftSize = 2048; src.connect(analyser);
        const buffer = new Uint8Array(analyser.fftSize);
        const startTime = performance.now();
        (function draw(){
          const t = performance.now() - startTime;
          ctx.clearRect(0,0,canvas.width, canvas.height);
          analyser.getByteTimeDomainData(buffer);
          ctx.beginPath();
          const mid = canvas.height/2; ctx.moveTo(0, mid);
          for(let x=0; x<canvas.width; x++){
            const i = Math.floor(x / canvas.width * buffer.length);
            const v = (buffer[i]-128)/128; // -1..1
            const y = mid + v * (canvas.height/2 - 10);
            ctx.lineTo(x, y);
          }
          ctx.strokeStyle = '#2F6B45'; ctx.lineWidth = 2; ctx.stroke();
          if(recording) requestAnimationFrame(draw);
        })();

        rec.start();
        setTimeout(()=>{ rec.stop(); }, 3000);
        rec.onstop = async ()=>{
          recording = false; btnRec.disabled=false; btnRec.textContent='● Grabar 3 s';
          stream.getTracks().forEach(t=>t.stop());
          audioBlob = new Blob(chunks, { type:'audio/webm' });
          audioPlayback.src = URL.createObjectURL(audioBlob);
          // guardar PNG del canvas
          soundImageDataUrl = canvas.toDataURL('image/png');
        }
      }catch(err){
        alert('No se pudo acceder al micrófono. Puedes continuar sin grabar.');
        recording=false; btnRec.disabled=false; btnRec.textContent='● Grabar 3 s';
      }
    });

    document.getElementById('back2').addEventListener('click', ()=> goStep(1));
    document.getElementById('next2').addEventListener('click', ()=> goStep(3));

    // --- step3: gesto invisible y envío
    const ghostText = document.getElementById('ghostText');
    document.getElementById('back3').addEventListener('click', ()=> goStep(2));

    function saveLocal(entry){
      const key='volar-archivo';
      const all = JSON.parse(localStorage.getItem(key) || '[]');
      all.unshift(entry);
      localStorage.setItem(key, JSON.stringify(all));
    }

    document.getElementById('submitAll').addEventListener('click', async ()=>{
      const entry = {
        t: new Date().toISOString(),
        headText: headText.value?.trim()||'',
        headImg: headImageDataUrl, // dataURL o null
        sndImg: soundImageDataUrl, // dataURL o null
        audio: audioBlob? await blobToDataURL(audioBlob): null,
        ghost: ghostText.value?.trim()||''
      };
      saveLocal(entry);
      // reset mínimo
      headText.value=''; headFile.value=''; headPreview.textContent='Sin imagen aún'; headImageDataUrl=null; ghostText.value=''; audioBlob=null; soundImageDataUrl=null; audioPlayback.removeAttribute('src'); ctx.clearRect(0,0,canvas.width, canvas.height);
      alert('¡Enviado al archivo! Abre la pestaña Archivo para verlo.');
      tabArchivo.click();
    });

    async function blobToDataURL(blob){
      return await new Promise((res)=>{ const r=new FileReader(); r.onload=()=>res(r.result); r.readAsDataURL(blob); });
    }

    function renderGallery(){
      const key='volar-archivo';
      const all = JSON.parse(localStorage.getItem(key) || '[]');
      galleryEl.innerHTML='';
      const tmpl = document.getElementById('tileTmpl');
      all.forEach(e=>{
        const node = tmpl.content.cloneNode(true);
        node.querySelector('.time').textContent = new Date(e.t).toLocaleString();
        node.querySelector('.headTxt').textContent = e.headText || '—';
        const headImgC = node.querySelector('.headImg');
        if(e.headImg){ const img = new Image(); img.src=e.headImg; img.style.maxWidth='100%'; img.style.borderRadius='8px'; headImgC.appendChild(img); } else { headImgC.textContent='(sin imagen)'; }
        const sndImgC = node.querySelector('.sndImg');
        if(e.sndImg){ const img2 = new Image(); img2.src=e.sndImg; img2.style.maxWidth='100%'; img2.style.borderRadius='8px'; sndImgC.appendChild(img2); } else { sndImgC.textContent='(sin imagen)'; }
        const audioWrap = node.querySelector('.audioWrap');
        if(e.audio){ const a=document.createElement('audio'); a.controls=true; a.src=e.audio; audioWrap.appendChild(a);} else { audioWrap.textContent='(sin audio)'; }
        node.querySelector('.ghostTxt').textContent = e.ghost || '—';
        galleryEl.appendChild(node);
      });
    }

    // Arranque: si hay items, precarga archivo al entrar
    // renderGallery();
  </script>
</body>
</html>
